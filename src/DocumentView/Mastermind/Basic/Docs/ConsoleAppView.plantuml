@startuml ConsoleAppView
title ConsoleApp View
namespace ConsoleApp{
    class ConsoleApp{
        ~Play()
        ~{static} Main(string)
    }
    ConsoleApp *--> Models.Game
    ConsoleApp *--> GameView

    abstract WithGameView{
        ~WithGameView(Game)
    }   
    WithGameView <|-- StartView
    WithGameView <|-- PlayView
    WithGameView <|-- ResumeView
    WithGameView <|-- GameView

    class GameView{
        ~GameView(Game) : base(Game)
        ~Start()
        ~Play()
        ~Resume() : bool
    }
    GameView  ..> Models.Game
    GameView *--> StartView
    GameView *--> PlayView
    GameView *--> ResumeView

    class StartView{
        ~StartView(Game)
        ~Interact()
    }
    StartView --> Models.Game
    StartView ..> BoardView
    StartView ..> MessageView

    class PlayView{
        ~PlayView(Game)
        ~Interact()
    }
    PlayView --> Models.Game
    PlayView ..> ProposedCombinationView
    PlayView ..> "0...n" Types.Color
    PlayView ..> BoardView
    PlayView ..> MessageView

    class ResumeView{
        ~ResumeView(Game)
        ~Interact(): bool
    }
    ResumeView --> Models.Game
    ResumeView ..> MessageView
    ResumeView ..> ConsoleIOs.YesNotDialog

    class BoardView{
        ~BoardView()
        ~Write(Game)
    }
    BoardView ..> Models.Game
    BoardView ..> Types.Color
    BoardView ..> MessageView
    BoardView ..> ProposedCombinationView
    BoardView ..> ConsoleIOs.ConsoleIO

    class ProposedCombinationView{
        ~ProposedCombinationView()
        ~Read(Game) : Color[]
        -GetColors(string) : Color[]
        -GetColor(char) : Color
        ~Write()
    }
    ProposedCombinationView ..> Models.Game
    ProposedCombinationView ..> Types.Color
    ProposedCombinationView ..> MessageView
    ProposedCombinationView ..> ErrorView
    ProposedCombinationView ..> Types.Error

    enum MessageView{
        -{static} Messages : string
        ~Title,
        ~Attempts,
        ~SecrectCombination,
        ~ProposedCombination,
        ~Results,
        ~Winner,
        ~Lost,
        ~Resume
        ~GetString(Message) : string
        ~GetString(Message, int) : string
        ~WriteLine(Message)
        ~WriteLine(Message, attempts)
        ~WriteLine(Message, whites, blacks)
    }
    MessageView ..> ConsoleIOs.ConsoleIO

    class ColorView{
        ~ColorView()
        ~GetlAllInitials() : string
        ~Write(Color)
    }
    ColorView ..> Types.Color
    ColorView ..> ConsoleIOs.ConsoleIO

    class ErrorView{
        -{static} Errors : string
        ~WriteLine(Error)
    }
    ErrorView --> Types.Error
    ErrorView ..> ColorView
    ErrorView ..> ConsoleIOs.ConsoleIO

    enum Types.Color{
    }

    enum Types.Error{
    }
}
@enduml