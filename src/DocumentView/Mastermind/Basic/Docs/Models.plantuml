@startuml MastermindModels
title Mastermind Models
namespace Models{
    class Game {
        -attempts : int
        -resultCount : int
        -{static} MaxAttempts : int
        +Game()
        +NewGame()
        +GetAttempts() : int
        +GetWhites() : int
        +GetBlacks() : int
        +GetProposedCOmbination(int position) : Color[]
        +Add(Color[])
        +CheckResult()
        +IsFinished() : bool
        +IsWinner() : bool
        +IsLooser() : bool
        +GetErrorToProposedCombination(Colorp[]) : Error
    }
    Game *--> SecrectCombination
    Game o--> "0..10" ProposedCombination
    Game o--> "0..10" Result
    Game ..> Types.Color
    Game ..> Types.Error
    
    abstract Combination{
        #{static} Width : int
        #colors : Color[]
        #Combination()
    }
    Combination <|-- SecrectCombination
    Combination <|-- ProposedCombination
    Combination --> "4" Types.Color

    class SecrectCombination{
        ~SecrectCombination()
        ~Generate()
        ~CheckResult(Color[]) : Result
        -Constain(Color) : bool
        -Constain(Color, position) : bool
    }
    SecrectCombination ..> ProposedCombination
    SecrectCombination ..> Result

    class ProposedCombination{
        ~ProposedCombination()
        ~Add(Color[])
        ~GetErrorToProposedCombination(Colorp[]) : Error
    }
    ProposedCombination ..> Types.Error

    class Result{
        -whites : int
        -blacks : int
        ~Result(whites, blacks)
        ~GetWhites() : int
        ~GetBlacks() : int
        ~IsWinner() : bool
    }

    enum Types.Color{}
    enum Types.Error{}

}