@startuml Architecture
title Architecture Design
package ConnectFour{
    package ConsoleApp{
    }
    ConsoleApp ..> Models
    ConsoleApp ..> Types
    ConsoleApp ..> Utils

    package Models #SkyBlue{
    }
    Models ..> Types
    Models ..> Utils

    package Types #GreenYellow{
    }
    Types ..> Utils

    package Utils #OrangeRed{
    }
}
@enduml

@startuml ConsoleAppDesign
title Dise単o de las Clases de Vista

package ConnectFour.ConsoleApp{
    namespace ConsoleApp{
        class Program{
        +Main(string[])
    }
    Program *-right-> Connect4

    class Connect4{
        ~Play()
    }
    Connect4 *--> Models.Game
    Connect4 *--> Views.GameView

    namespace Views{        
        class GameView{
            ~Start()
            ~Play()
            ~Resume()
        }
        GameView --> Models.Game
        GameView *--> Views.StartView
        GameView *--> Views.PlayView
        GameView *--> Views.ResumeView

        class StartView{
            ~StartView(Game)
            ~Interact()
        }
        StartView --> Models.Game
        StartView ..> ViewModels.SetUpPlayerView
        StartView ..> ViewModels.Message
        StartView ..> ViewModels.BoardView

        class PlayView{
            ~PlayView(Game)
            ~Interact()
        }
        PlayView --> Models.Game
        PlayView ..> ViewModels.PlayerView
        PlayView .down.> ViewModels.PlayerCreator
        PlayView ..> ViewModels.Message
        PlayView ..> ViewModels.TokenView
        PlayView ..> ConsoleIOs.ConsoleIO

        class ResumeView{
            ~ResumeView(Game)
            ~Interact()
        }
        ResumeView --> Models.Game
        ResumeView ..> ViewModels.Message
        ResumeView ..> ConsoleIOs.YesNotDialogView

        namespace ViewModels{
            class SetUpPlayerView{
                -SetPlayers(Game)
            }
            SetUpPlayerView ..> Models.Game
            SetUpPlayerView ..> Message
            SetUpPlayerView ..> ErrorView
            SetUpPlayerView ..> ConsoleIOs.ConsoleIO

            class BoardView{
                ~Write(Game)
            }
            BoardView ..> Models.Game
            BoardView ..> Utils.Coordinate
            BoardView ..> Message
            BoardView ..> Types.Token
            BoardView ..> TokenView
            BoardView ..> ConsoleIOs.ConsoleIO

            class PlayerView{
                ~PlayView(Game)
                ~Interact()
                #{abstract}GetColunm() : int
                #GetErrorToDrop(colunm) : Error
            }
            PlayerView ..> Models.Game
            PlayerView ..> Message
            PlayerView ..> ErrorView

            class PlayerCreator{
                -{static}instance : PlayerCreator
                -PlayerCreator()
                ~GetInstance() : PlayerCreator
                ~CreatePlayerView(Game) : PlayerView
            }
            PlayerCreator ..> PlayerView
            PlayerCreator ..> PlayerViews.UserPlayer
            PlayerCreator ..> PlayerViews.MachinePlayer
            
            namespace PlayerViews{
                class UserPlayer{
                    ~UserPlayer(Game)
                    #GetColunm() : int
                    -GetErrorColunmOutOfRange(colunm) : error
                    #GetErrorToDrop(colunm) : Error
                }
                UserPlayer -up-|> ViewModels.PlayerView
            
                class MachinePlayer{
                    ~MachinePlayer(Game)
                    #GetColunm() : int
                }
                MachinePlayer -up-|> ViewModels.PlayerView
            }

            class TokenView{
                ~Write(Token)
            }
            TokenView ..> ConsoleIOs.ConsoleIO
            TokenView ..> Types.Token

            enum Types.Token{}

            class ErrorView{
                -{static}ERRORS : string[]
                ~WriteLine(Error)
            }
            ErrorView ..> ConsoleIOs.ConsoleIO

            enum Message{
                ~Titile
                ~HorizontalLine
                ~VerticalLine
                ~Turn
                ~EnterColunmToDrop
                ~InvalidColunm
                ~CompleteColunm
                ~PlayerWin
                ~PlayersTied
                ~Resume    
                -{static}MESSAGES : string[]
                ~{static}Write(Message)
                ~{static}WriteLine(Message)
                ~{static}WriteLine(Message, title)
                ~{static}GetMessage(Message)
            }
            Message ..> ConsoleIOs.ConsoleIO
        }

        namespace ConsoleIOs{
             class ConsoleIO{}

             class YesNotDialogView{}
             YesNotDialogView ..> ConsoleIO
        }
    }
}
@enduml

@startuml ModelsDesign
title Desi単o de Clases del Modelo

package ConnectFour.Models{
    class Game{
        +Game()
        +Reset()
        +Drop(colunm)
        +GetErrorToDrop(colum) : Error
        +GetErrorToSetNumOfPlayers(int players) : Error
        +GetActivePlayer() : Token
        +GetLastPlayer() : Token
        +GetPlayerType() : PlayerType
        +GetToken(Coordinate) : Token
        +IsFinished() : boolean
        +IsWinner() : boolean
        +Next()
        +SetPlayers(players)
    }
    Game *--> "1" Board
    Game *--> "1" Turn
    Game ..> Types.Error

    class Board{
        +Board()
        ~Reset()
        ~Drop(colunm, Token)
        -GetLastDrop(colunm) : Coordinate
        -IsEmpty(Coordinate) : boolean
        ~IsOccupied(Coordinate, Token) : boolean
        ~GetToken(Coordinate) : Token
        ~IsComplete(colunm) : boolean
        ~IsFinished() : boolean
        ~IsComplete() : boolean
        ~IsWinner() : boolean
        -IsCoonectFour(Line) : boolean
    }
    Board *--> "6x7" Types.Token
    Board ..> Utils.Coordinate

    class Turn{
        +Turn(Game)
        +GetActivePlayer() : Token
        +GetLastPlayer() : Token
        +GetPlayerType() : PlayerType
        ~SetPlayers(players)
        ~Next()
        -Change() : int
        +Drop(colunm)       
        +GetErrorToDrop(colum) : Error
        +GetErrorToSetNumOfPlayers(int players) : Error
    }
    Turn *--> "2" Player
    Turn --> Board
    Turn ..> Types.Token
    Turn ..> Types.Error

    abstract Player{
        +Player(Token, Board, PlayerType)
        ~GetToken() : Token
        +GetPlayerType() : PlayerType
        ~Drop(colunm)
        ~GetErrorToDrop(colunm) : Error
    }
    Player --> Types.Token
    Player --> Board
    Player --> Types.PlayerType
    Player ..> Types.Error
}
@enduml

@startuml TypesDesign
title Desi単o de Clases de los Tipos

package ConnectFour.Types{
    enum Token{
        +X,
        +O,
        +Null
    }

    enum Error{
        +ColunmIsOutOfRange,
        +ColunmIsComplete
    }

    enum PlayerType{
        +UserPlayer,
        +MachinePlayer
    }
}

@enduml

@startuml UtilsDesign
title Desi単o de Clases de las Utilidades

package ConnectFour.Utils{
    class Coordinate{
        +{static}ROWS = 6
        +{static}COLUNM = 7
        -row : int
        -colunm : int
        +Coordinate()
        +Coordinate(row, colunm)
        +SetRow(row)
        +GetRow() : int
        +SetColunm(colunm) 
        +GetColunm() : int
        +Shifted(Coordinate) : Coordinate
        +IsValid() : boolean
        +isValid(value) : boolean
    }
    Coordinate ..> ClosedInterval

    class ClosedInterval{
        -min : int
        -max : int
        +ClosedInterval(min, max)
        +IsIncluided(value) : boolean
    }

    class Direction{
        +{static}NORTH = Direction(1, 0)
        +{static}NORTH_EAST = Direction(1, 1)
        +{static}EAST = Direction(0, 1)
        +{static}SOUTH_EAST = Direction(-1, 1)
        +{static}SOUTH = Direction(-1, 0)
        +{static}SOUT_WEST = Direction(-1, -1)
        +{static}WEST = Direction(0, -1)
        +{static}NORTH_WEST = Direction(1, -1)
        +GetCoordinate() : Coordinate
        +GetOppositeDirection() : Direction
        +GetDirections() : List<Direction>
    }
    Direction --> Coordinate

    class Line{
        +{static}Length = 4
        +Line(Coordinate)
        +GetCoordinates() : Coordinates[]
        +GetDirection() : Direction
        +Shift()
    }
    Line --> Coordinate : origin
    Line --> Coordinate : coordinates
    Line --> Direction 

}
@enduml
