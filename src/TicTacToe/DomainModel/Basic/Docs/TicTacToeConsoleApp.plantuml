@startuml TicTacToeDomainModelArchitecture
title Domain Model
        namespace TicTacToe.ConsoleApp{
        class TicTacToe{
            ~TicTacToe()
            ~Start()
            -PlayGame()
            -Resume() : bool
            -NewGame()
            ~{static} Main(string)
        }
        TicTacToe.ConsoleApp.TicTacToe *--> "1" TicTacToe.ConsoleApp.Turn
        TicTacToe.ConsoleApp.TicTacToe *--> "2" TicTacToe.ConsoleApp.Player
        TicTacToe.ConsoleApp.TicTacToe *--> "1" TicTacToe.ConsoleApp.Board
        TicTacToe.ConsoleApp.TicTacToe ..> TicTacToe.ConsoleApp.Types.Message
        TicTacToe.ConsoleApp.TicTacToe ..> TicTacToe.ConsoleApp.Types.MessageType            

        class Turn{
            ~{static} NUM_PLAYERS : int
            -current : int
            ~CurrentPlayer => current
            ~Last => Change()
            ~Turn(Player[])
            ~Reset()
            ~Next()
            -Change() : int
        }
        TicTacToe.ConsoleApp.Turn --> "2" TicTacToe.ConsoleApp.Player
        TicTacToe.ConsoleApp.Turn ..> "2" TicTacToe.ConsoleApp.Types.Token

        class Player{
            ~Token => Token
            ~Player(Token, Board)
            ~MakeMove()
            -PutToken()
            -ReadCoordinate(MessageType) : Coordinate
            ~GetErrorTypeToPut(Coordinate) : ErrorType.Empty
            -MoveToken()
            ~GetErrorTypeToMoveOrigin(Coordinate) : ErrorType.NotOwner
            ~GetErrorTypeToMoveTarget(Coordinate, Coordinate) : ErrorType.SameCoordinate
            ~Resume() : bool
        }
        TicTacToe.ConsoleApp.Player ..> TicTacToe.ConsoleApp.Types.Token
        TicTacToe.ConsoleApp.Player --> TicTacToe.ConsoleApp.Board
        TicTacToe.ConsoleApp.Player ..> TicTacToe.ConsoleApp.Types.Coordinate
        TicTacToe.ConsoleApp.Player ..> TicTacToe.ConsoleApp.Types.Message
        TicTacToe.ConsoleApp.Player ..> TicTacToe.ConsoleApp.Types.MessageType
        TicTacToe.ConsoleApp.Player ..> TicTacToe.ConsoleApp.Types.Error
        TicTacToe.ConsoleApp.Player ..> TicTacToe.ConsoleApp.Types.ErrorType
        TicTacToe.ConsoleApp.Player ..> TicTacToe.ConsoleApp.IO.YesNotDialog

        class Board{
            ~Board()
            ~Reset()
            ~AreAllTokenOnBoard(Token) : bool
            ~PutToken(Coordinate, Token)
            ~GetErrorTypeToPut(Coordinate) : ErrorType.Empty
            ~IsOccupied(Coordinate, Token) : bool
            ~MoveToken(Coordinate, Coordinate)
            -IsEmpty(Coordinate) : bool
            -GetToken(Coordinate) : Token
            ~GetErrorTypeToMoveOrigin(Coordinate) : ErrorType.NotOwner
            ~GetErrorTypeToMoveTarget(Coordinate, Coordinate) : ErrorType.SameCoordinate
            ~IsTicTacToe(Token) : bool
            -GetDirections(Token) : List<Direction>
            -GetCoordinate(Tokent) : List<Coordinate>
            ~Write()
        }
        TicTacToe.ConsoleApp.Board o--> "3x3" TicTacToe.ConsoleApp.Types.Token
        TicTacToe.ConsoleApp.Board ..> TicTacToe.ConsoleApp.Types.Coordinate
        TicTacToe.ConsoleApp.Board ..> TicTacToe.ConsoleApp.Types.Direction
        TicTacToe.ConsoleApp.Board ..> TicTacToe.ConsoleApp.Types.Message
        TicTacToe.ConsoleApp.Board ..> TicTacToe.ConsoleApp.Types.MessageType
        TicTacToe.ConsoleApp.Board ..> TicTacToe.ConsoleApp.Types.Error
        TicTacToe.ConsoleApp.Board ..> TicTacToe.ConsoleApp.Types.ErrorType
        TicTacToe.ConsoleApp.Board ..> TicTacToe.ConsoleApp.IO.ConsoleIO

        class TicTacToe.ConsoleApp.Types.Coordinate{
            -[static] DIMENSION : int
            -{static} ROW : string
            -{static} COLUNM : string
            -row : int
            -colunm : int
            ~Row => row
            ~Colunm => colunm
            ~Coordinate(row, colunm)
            ~Read() : Coordinate
            ~IsValid() : bool
            ~Equals(Coordinate) : bool
            ~GetDirection(Coordinate) : Direction
            -InVertical(Coordinate) : bool
            -InHorizontal(Coordinate) : bool
            -InMainDiagonal() : bool
            -InInverseDiagonal() : bool
        }
        TicTacToe.ConsoleApp.Types.Coordinate ..> TicTacToe.ConsoleApp.Types.ClosedInterval
        TicTacToe.ConsoleApp.Types.Coordinate ..> TicTacToe.ConsoleApp.IO.ConsoleIO
        TicTacToe.ConsoleApp.Types.Coordinate ..> TicTacToe.ConsoleApp.Types.Direction
        TicTacToe.ConsoleApp.Types.Coordinate ..> TicTacToe.ConsoleApp.Types.Message
        TicTacToe.ConsoleApp.Types.Coordinate ..> TicTacToe.ConsoleApp.Types.MessageType

        class TicTacToe.ConsoleApp.Types.ClosedInterval{
            -min : int
            -max : int
            ~ClosedInterval(min, max)
            ~IsIncluide(value) : bool
        }
        class TicTacToe.ConsoleApp.Types.Message{
            -{static} MESSAGES : string[]
            ~Message(MessageType)
            ~Write(MessageType messageType)
            ~WriteLine()
            ~WriteLine(string player)
            WriteLine(MessageType)
        }
        TicTacToe.ConsoleApp.Types.Message --> TicTacToe.ConsoleApp.Types.MessageType
        TicTacToe.ConsoleApp.Types.Message ..> TicTacToe.ConsoleApp.IO.ConsoleIO

        enum TicTacToe.ConsoleApp.Types.MessageType{
            +TITLE,
            +HORIZONTAL_LINE,
            +VERTICAL_LINE,
            +ENTER_COORDINATE_TO_PUT,
            +COORDINATE_TO_PUT,
            +COORDINATE_TO_REMOVE,
            +COORDINATE_TO_MOVE,
            +WINNER,
            +RESUME
        }
        class TicTacToe.ConsoleApp.IO.YesNotDialog{
            ~YesNotDialog()
            ~Read(string)
            ~IsAffirmative() : bool
        }
        TicTacToe.ConsoleApp.IO.YesNotDialog ..> TicTacToe.ConsoleApp.IO.ConsoleIO

        enum TicTacToe.ConsoleApp.Types.Direction{
            +HORIZONAL,
            +VERTICAL,
            +MAIN_DIAGONAL,
            +iNVERSE_DIAGONAL,
            +NULL
        }

        enum TicTacToe.ConsoleApp.Types.Token{
            +X,
            +O,
            +NULL
        }
        
        class TicTacToe.ConsoleApp.Types.Error{
            -{static} ERRORS : string
            ~Error(ErrorType)
            ~WriteLine()
        }
        TicTacToe.ConsoleApp.Types.Error *--> TicTacToe.ConsoleApp.Types.ErrorType
        TicTacToe.ConsoleApp.Types.Error ..> TicTacToe.ConsoleApp.IO.ConsoleIO

        enum TicTacToe.ConsoleApp.Types.ErrorType{
            +IS_NOT_EMPTY,
            +NOT_OWNER,
            +SAME_COORDINATES,
            +WRONG_COORDINATES,
            +NULL
        }
    }
@enduml