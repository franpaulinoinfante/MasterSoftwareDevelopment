@startuml TicTacToe
title namespace.TicTacToe
class Game as "tictactoe.models.\nGame"
class View as "tictactoe.models.\nView"
class Token as "tictactoe.models.\Token"


class TicTacToe{
        ~TicTacToe()
        #Play()
    }
    TicTacToe *-down-> Game
    TicTacToe *-down-> View
@enduml

@startuml TicTacToe.Views
title Views
namespace TicTacToe.ConsoleApp{
    abstract WithGameView{
        ~WithGameView(Game)
    }
    WithGameView *--> tictacttoe.models.Game
    WithGameView <|-- StartView
    WithGameView <|-- PlayView
    WithGameView <|-- ResumeView
    
    class View{
        ~View(Game)
        +Interact()
    }
    View *--> StartView
    View *--> PlayView
    View *--> ResumeView
    View *--> tictacttoe.models.Game

    class StartView{
        ~StartView(Game)
        +Interact()
    }
    StartView ..> BoardView
    StartView ..> MessageView

     class MessageView{
        ~MessageView(MessageType)
     }
     MessageView *--> MessageType
    

    class BoardView{
        ~BoardView(Game)
        +Write()
    }
    BoardView *--> tictacttoe.models.Game
    BoardView ..> TokenView
    BoardView ..> MessageView

    class TokenView{
        ~Token(Token)
        +Write()
    }
    TokenView *--> tictacttoe.types.TokenType
    TokenView ..> ConsoleIO

    class PlayView{
        ~Play(Game)
        +Interact()
    }
    PlayView ..> tictacttoe.models.Game
    PlayView ..>PlayerView
    PlayView ..> BoardView
    PlayView ..> ConsoleIO

    class PlayerView{
        ~PlayerView(Game)
        +Interact()
        -PutToken()
        -GetCoordinate()
        -GetPutError() : Error
        -MoveToken()
        -GetMoveOriginError() : Error
        -GetMoveTargetError() : Error
    }
    PlayerView ..> tictacttoe.models.Game
    PlayerView ..> CoordinateView
    PlayerView ..> ErrorView

    class CoordinateView{
        +Read() : Coordainte
    }
    CoordinateView ..> tictacttoe.models.Game
    CoordinateView ..> ErrorView
    CoordinateView ..> MessageView
    CoordinateView ..> ConsoleIO

    class ErrorView{
        ~ErrorView(Error)
        +Write()
    }
    ErrorView *--> tictacttoe.types.ErrorType
    ErrorView ..> MessageView
    ErrorView ..> ConsoleIO

    class ResumeView{
        ~Resume(Game)
        +Interact()
    }
    ResumeView ..> tictacttoe.models.Game
    ResumeView ..> MessageView
    ResumeView ..> YesOrNotDialog

    class YesOrNotDialog{

    }
    YesOrNotDialog ..> ConsoleIO

    enum MessageType{
    TITLE
    HORIZONTAL_LINE
    VERTICAL_LINE
    ENTER_COORDINATE_TO_PUT
    COORDINATE_TO_PUT
    COORDINATE_TO_REMOVE
    COORDINATE_TO_MOVE
    PLAYER_WIN
    RESUME
    }

    enum tictacttoe.types.TokenType{
        X
        O
        NULL
    }

    enum tictacttoe.types.ErrorType{
        NOT_EMPTY
        NOT_OWNER
        SAME_COORDINATES
        WRONG_COORDINATES
        NULL

    }
}
@enduml

@startuml TicTacToe.Models
    namespace TicTacToe.Models{
        class Game{
            +Game()
            +NewGame()
            +GetCurrentPlayer() : Token
            +IsTicTacToe(Token) : bool
            +IsComplete(Token) : bool
            +PutToken(Coordinate)
            +GetPutTokenError(): ErrorCode
            +MoveToken(Coordinate, Coordinate)
            +GetMoveOriginError(Coordinate)
            +GetMoveTargetError(Coordinate, Coordinate)
        }
        TicTacToe.Models.Game *--> "1" Board
        TicTacToe.Models.Game *--> "1" Turn
        TicTacToe.Models.Game *--> "2" Player
        TicTacToe.Models.Game ..> TicTacToe.Types.ErrorCode
        TicTacToe.Models.Game ..> TicTacToe.Types.Token
        TicTacToe.Models.Game ..> "1" TicTacToe.Types.Coordinate

        class Board{
            ~Board()
            ~Reset()
            ~Put(Token, Coordinate)
            ~GetPutTokenError(Coordinate) : ErrorCode
            -IsEmpty(Coordinate) : bool
            ~IsComplete(Token) : bool
            ~Move(Token, Coordinate, Coordinate)
            ~GetMoveOriginError(Token, Coordinate) : ErrorCode
            -IsOccupied(Token, Coordinate) : bool
            ~GetMoveTargeError(Coordinate, Coordinate) : ErrorCode
            ~IsTicTacToe(Token) : bool
            -GetDirections(Token) : Direction
            -GetCoordinate(Token) : Coordinate[]
        }
        TicTacToe.Models.Board *--> TicTacToe.Types.Token
        TicTacToe.Models.Board ..> TicTacToe.Types.ErrorCode
        TicTacToe.Models.Board ..> "1" TicTacToe.Types.Coordinate
        TicTacToe.Models.Board ..> TicTacToe.Utils.Direction


        class Turn{
            ~current
            ~Turn(Player[])
            ~Reset()
            ~GetCurrent() : Player
            ~Next()
        }
        TicTacToe.Models.Turn --> "2" Player
        TicTacToe.Models.Turn ..> TicTacToe.Types.Token

        class Player{
            ~Player(Token, Board)
            ~GetToken() : Token
            ~PutToken(Token, Coordinate)
            ~MoveToken(Token, Coordinate, Coordinate)
        }
        TicTacToe.Models.Player --> "1" Board
        TicTacToe.Models.Player --> "1" TicTacToe.Types.Token
        TicTacToe.Models.Player ..> "1" TicTacToe.Types.Coordinate
    }

    namespace TicTacToe.Types{
        class Coordinate{
            +{static} DIMENSION : int
            +
        }
        TicTacToe.Types.Coordinate -up-|> TicTacToe.Utils.ConcreteCoordinate
        TicTacToe.Types.Coordinate .up.> TicTacToe.Utils.Direction

        enum Token{
            +X
            +O
        }

        enum ErrorCode{
            +NOT_EMPTY
            +NOT_OWNER
            +SAME_COORDINATES
            +WRONG_COORDINATES
            +NULL
        }
    }

@enduml

@startuml TicTacToe.Utils
    namespace TicTacToe.Utils{     
        interface ICoordinate{
            +{static} NULL : NullCoordinate.GetInstante()
            +IsNull(): bool
            +GetDirection(Coordinate) : Direction
            +InHorizontal(Coordinate) : bool
            +InVertial(Coordinate) : bool
            +InDiagonal(Coordinate) : bool
        } 
        TicTacToe.Utils.ICoordinate ..> Direction

        class Coordinate{
            -row : int
            -column : int
            +Coordinate()
            +Coordinate(row, column)
            +SetCoordinate(row, column)
            +GetRow() : int
            +GetColunm() : int
            +IsIncluide(Coordinate) : bool
            +GetDirection(Coordinate) : Direction
        }        
        Coordinate .up.> ICoordinate
        TicTacToe.Utils.Coordinate ..> Direction
        

        enum Direction{
            VERTICAL,
	        HORIZONTAL,
	        MAIN_DIAGONAL,
	        INVERSE_DIAGONAL,
	        NULL;
        }
    }
@enduml