@startuml TicTacToeAnalysisConsoleApp
title TicTacToe Document/View
namespace TicTacToe.ConsoleApp{
    TicTacToe.WithViewGame *-down-> TicTacToe.Models.Game

    class ConsoleApp{
        #CreateViewGame(Game) : ViewGame
        +{static} Main(string[])
    }
    ConsoleApp ..> ConsoleTicTacToe

    class ConsoleTicTacToe{
        ~ConsoleApp(Game)      
        ~GameView(Game)
        ~Start()
        ~Play()
        ~Resume() : bool
    }
    ConsoleTicTacToe *--> StartView
    ConsoleTicTacToe *--> PlayView
    ConsoleTicTacToe *--> ResumeView
    ConsoleTicTacToe -up-|> TicTacToe.WithViewGame

    class StartView{
        ~StartView(Game)
        ~Interact()
    }
    StartView ..> BoardView
    StartView ..> MessageView
    StartView ..> TicTacToe.Views.MessageType
    StartView -up-|> TicTacToe.WithViewGame

    class PlayView{
        ~PlayView(Game)
        ~Interact()
    }
    PlayView ..> PlayerView
    PlayView ..> BoardView
    PlayView ..> MessageView
    PlayView ..> TicTacToe.Views.MessageType
    PlayView ..> TicTacToe.Models.Token
    PlayView -up-|> TicTacToe.WithViewGame

    class PlayerView{
        ~PlayerView(Game)
        ~Interact()
        -PutToken()
        -GetCoordinate() : Coordinate
        -GetErrorTypeToPutToken(Coordinate) : ErrorType
        -MoveToken()
        -GetErrorTypeToMoveOrigin(Coordinate) : ErrorType
        -GetErrorTypeToMoveTarge(Coordinate, Coordinate) : ErrorType
    }
    PlayerView ..> TicTacToe.Models.Coordinate
    PlayerView ..> ErrorView
    PlayerView ..> TicTacToe.Models.ErrorType
    PlayerView ..> MessageView
    PlayerView ..> TicTacToe.Views.MessageType

    class ResumeView{
        ~Resume(Game)
        ~Interact() : bool
    }
    ResumeView ..> MessageView
    ResumeView ..> TicTacToe.Views.MessageType
    ResumeView ..> YesNoDialog
    ResumeView -up-|> TicTacToe.WithViewGame


    class BoardView{
        ~BoardView(Game)
        ~Write()
    }
    BoardView ..> MessageView
    BoardView ..> TicTacToe.Views.MessageType


    class MessageView{
        -{static} MESSAGES : string[]
        ~MessageView()
        ~MessageView(MessageType)
        ~Write(MessageType)
        ~WriteLine(MessageType)
        ~WriteLine(title : string)
        ~ToString()
    }
    MessageView --> TicTacToe.Views.MessageType
    MessageView ..> ConsoleIO

    class ErrorView{
        -{static} ERROR_MESSAGES : string[]
        ~ErrorView(ErrorType)
        ~WriteLine(ErrorTpe)
    }
    ErrorView --> TicTacToe.Models.ErrorType
    ErrorView ..> ConsoleIO

    class YesNoDialog{
        ~Read()
        ~IsAffirmative() : bool
    }
    YesNoDialog ..> ConsoleIO
    
     enum TicTacToe.Models.Token{
     }

    enum TicTacToe.Views.MessageType{

    }

    enum TicTacToe.Models.ErrorType{

    }
}
@enduml

@startuml TicTacToeModels
title TicTacToe Models
namespace TicTacToe.Models{
    class Game{
        +Game()
        +NewGame()
        +IsTicTacToe(Token) : bool
        +GetToken(Coordinate) : Token
        +NextTurn()
        +GetCurrentTurn() : Token
        +AreAllTokenOnBoard() : bool
        +PutToken(Coordinate, Token)
        +GetErrorCodeToPutToken(Coordinate) : ErrorType.SquareNoEmpty
        +MoveToken(Coordinate, Coordinate)
        +GetErrorCodeToMoveOrigin(Coordinate) : ErrorType.TokenNotOwner
        +GetErrorCodeToMoveTarget(Coordinate, Coordinate) : ErrorType.SameCoordinate
    }
    Game *--> "1" Board
    Game *--> "2" Player
    Game *--> "1" Turn
    Game ..> Coordinate
    Game ..> Token
    Game ..> ErrorType

    class Turn{
        ~{static} NUM_PLAYERS : int
        -current : int
        ~Turn(Players[])
        ~GetCurrent() : Player
        ~NewGame()
        ~Next()
    }
    Turn --> "2" Player

    class Player{
        ~Player(Token, Board)
        ~GetToken() : Token
        ~PutToken(Coordinate)
        ~MoveToken(Coordinate, Coordinate)
    }
    Player --> "1" Board
    Player ..> Coordinate
    Player ..> Token

    class Board{
        ~Board()
        ~NewGame()
        ~AreAllTokenOnBoard() : bool
        ~GetToken(Coordinate) : Token
        -IsOccupied(Coordinate, Token) : bool
        ~Put(Coordinate, Token)
        ~GetErrorCodeToPutToken(Coordinate) : ErrorType.SquareNotEmpty
        ~IsEmpty(Coordinate) : Bool
        ~Move(Coordinate, Coordinate)
        ~GetErrorCodeToMoveOrigin(Coordinate) : ErrorType.TokenNotOwner
        ~GetErrorCodeToMoveTarget(Coordinate, ErrorType) : Coordinate.SameCoordinate
        ~IsTicTacToe(Token) : bool
        -GetDirections(Token) : List<Direction>
        -GetCoordinates(Token) : List<Coordinate>
    }
    Board ..> Coordinate
    Board ..> Token
    Board ..> ErrorType
    Board ..> Direction

    class Coordinate{
        +{static} DIMENSION : int
        -row : int
        -colunm : int
        +Coordinate()
        +Coordinate(row, colunm)
        +GetRow() : int
        +GetColunm() : int
        +SetCoordinate(row, colunm)
        +GetDirections() : Direction
    }

    enum Direction{
        +Horizontal
        +Vertical
        +MainDiagonal
        +InverseDiagonal
        +Null
    }

    enum Token{
        +X,
        +O,
        +NULL
    }

    enum ErrorType{
        +NOT_EMPTY
        +NOT_OWNER
        +SAME_COORDINATES
        +WRONG_COORDINATES
        +NULL
    }
}
@enduml

@startuml TicTacToe.Types
title TicTaccToe Types
namespace TicTaccToe.Types{
    class Coordinate{
        +{static} DIMENSION : int
        -row : int
        -colunm : int
        +Coordinate()
        +Coordinate(row, colunm)
        +GetRow() : int
        +GetColunm() : int
        +SetCoordinate(row, colunm)
    }

    enum Token{
        +X,
        +O,
        +NULL
    }

    enum ErrorCode{
        +NOT_EMPTY,
        +NOT_OWNER,
        +SAME_COORDINATES,
        +WRONG_COORDINATES,
        +NULL
    }
}
@enduml