@startuml DomainModelArchitecture
title Análisis - Models
namespace MastermindConsoleApp{
    class Game{
        ~Game()
        ~Start()
        -Play()
        -Read()
        -Resume() : bool
        -NewGame()
        -Write()
    }
    Game *--> "1" Board
    Game ..> ProposedCombination
    Game ..> MessageType
    Game ..> ConsoleIOs.YesNotDialog

    class Board{
        -resultsCount
        -attempts : int
        -{static} TOTAL_ATTEMPTS : int
        ~Board()
        ~NewGame()
        ~AddProposedCombination(ProposedCombination)
        ~CheckResults() : Result
        ~IsFinished() : bool
        -IsWinner() : bool
        -IsLooser() : bool
        ~Write()
    }
    Board *--> "1" SecretCombination
    Board o--> "0..10" ProposedCombination
    Board o--> "0..10" Result
    Board ..> MessageType
    Board ..> ConsoleIOs.ConsoleIO

    abstract Combination{
        #colors : Color[]
        #{static} Width : int
        ~Combination()
        #{abstract} Write()
    }
    Combination <|-- SecretCombination
    Combination <|-- ProposedCombination 
    Combination ..> ColorType
    Combination ..> MessageType
    Combination ..> ConsoleIOs.ConsoleIO

    class SecretCombination{
        ~SecretCombination()
        ~GenerateSecrectCombination()
        ~CheckResult(ProposedCombination) : Result
        ~Constain(ColorType) : bool
        -Constain(ColorType, position : int) : bool
    }
    SecretCombination ..> Result
    SecretCombination ..> ProposedCombination

    class ProposedCombination{
        -{static} Duplicate : int
        -{static} FirstChar : int
        ~ProposedCombination()
        ~ColorTypes => ColorType
        ~Read() : ProposeCombination
        -GetErrorTypeToReadColorType(string colors) : ErrorType
        -GetColorType(char) : ColorType
        -IsDuplicate(ColorType, string) : bool
        -AddPropose(string)
    }
    ProposedCombination ..> ErrorType

    class Result{
        -blacks : int
        -whites : int
        -{static} Width : int
        ~Result(blacks, whites)
        ~IsWinner() : bool
        ~WriteLine()
    }
    Result ..> ConsoleIOs.ConsoleIO

    enum MessageType{
        ~Title,
        ~SecretCombination,
        ~Attempts,
        ~ProposeCombination,
        ~Results,
        ~Winner,
        ~Looser,
        ~Resume
        ~WriteLine(MessageType)
        ~WriteLine(MessageType, blacks, whites)
        ~WriteLine(MessageType, attempts)
        ~GetToString(MessageType)
    }
    MessageType ..> ConsoleIOs.ConsoleIO

    enum ErrorType{
        ~Duplicated,
        ~WrongCharacters,
        ~WrongLength,
        ~Null
        ~WriteLine(ErrorType)
        ~WriteLine(ErrorType, ColorType[])
        ~ToString(ErrorType)
    }
    ErrorType ..> ConsoleIOs.ConsoleIO

    enum ColorType{
        ~Red,
        ~Green,
        ~Yellow,
        ~Blue,
        ~Magenta,
        ~Cyan
        ~GetColorType(ColorType)
    }


    class ConsoleIOs.ConsoleIO{
    }

    class ConsoleIOs.YesNotDialog{
    }
}
@enduml

@startuml DomainModel
title Análisis - Types
namespace MastermindTypes{
    enum MessageType{
        ~Title,
        ~SecretCombination,
        ~Attempts,
        ~ProposeCombination,
        ~Results,
        ~Winner,
        ~Looser,
        ~Resume
        ~WriteLine(MessageType)
        ~WriteLine(MessageType, blacks, whites)
        ~WriteLine(MessageType, attempts)
        ~GetToString(MessageType)
    }
    MessageType ..> ConsoleIOs.ConsoleIO

    enum ErrorType{
        ~Duplicated,
        ~WrongCharacters,
        ~WrongLength,
        ~Null
        ~WriteLine(ErrorType)
        ~WriteLine(ErrorType, ColorType[])
        ~ToString(ErrorType)
    }
    ErrorType ..> ConsoleIOs.ConsoleIO

    enum ColorType{
        ~Red,
        ~Green,
        ~Yellow,
        ~Blue,
        ~Magenta,
        ~Cyan
        ~GetColorType(ColorType)
    }
}
@enduml